// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsMix.Storage;

#nullable disable

namespace NewsMix.Migrations
{
    [DbContext(typeof(SqliteContext))]
    [Migration("20240207182514_add_bot_sent_messages")]
    partial class add_bot_sent_messages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("NewsMix.Storage.Entities.ActiveInlineQuery", b =>
                {
                    b.Property<string>("QueryID")
                        .HasColumnType("TEXT");

                    b.Property<int>("CallbackActionType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TopicInternalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QueryID");

                    b.ToTable("ActiveInlineQueries");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.BotSentMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SendAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<long>("TelegramMessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BotSentMessages");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.FoundPublication", b =>
                {
                    b.Property<string>("PublicationUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TopicInternalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PublicationUrl");

                    b.ToTable("FoundPublications");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.NewsTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HashTag")
                        .HasColumnType("TEXT");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NewsSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("OrderInList")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VisibleNameRU")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NewsTopics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = true,
                            HashTag = "#ea #apex",
                            InternalName = "apex",
                            NewsSource = "ea",
                            OrderInList = (byte)1,
                            VisibleNameRU = "Apex Legends"
                        },
                        new
                        {
                            Id = 2,
                            Enabled = true,
                            HashTag = "#habr #rating25plus",
                            InternalName = "r25+",
                            NewsSource = "habr",
                            OrderInList = (byte)1,
                            VisibleNameRU = "Статьи с рейтингом > 25"
                        },
                        new
                        {
                            Id = 3,
                            Enabled = true,
                            HashTag = "#icyveins #wow",
                            InternalName = "wow",
                            NewsSource = "icyveins",
                            OrderInList = (byte)1,
                            VisibleNameRU = "World of Warcraft"
                        },
                        new
                        {
                            Id = 4,
                            Enabled = true,
                            HashTag = "#icyveins #wowclassic",
                            InternalName = "wow-classic",
                            NewsSource = "icyveins",
                            OrderInList = (byte)2,
                            VisibleNameRU = "World of Warcraft Classic"
                        },
                        new
                        {
                            Id = 5,
                            Enabled = true,
                            HashTag = "#icyveins #diablo",
                            InternalName = "diablo",
                            NewsSource = "icyveins",
                            OrderInList = (byte)3,
                            VisibleNameRU = "Diablo"
                        },
                        new
                        {
                            Id = 6,
                            Enabled = true,
                            HashTag = "#icyveins #warcraft",
                            InternalName = "warcraft 3",
                            NewsSource = "icyveins",
                            OrderInList = (byte)4,
                            VisibleNameRU = "Warcraft"
                        },
                        new
                        {
                            Id = 7,
                            Enabled = true,
                            HashTag = "#icyveins #lostarc",
                            InternalName = "lost ark",
                            NewsSource = "icyveins",
                            OrderInList = (byte)5,
                            VisibleNameRU = "Lost Arc"
                        },
                        new
                        {
                            Id = 8,
                            Enabled = true,
                            HashTag = "#noobclub #wow",
                            InternalName = "wow",
                            NewsSource = "noobclub",
                            OrderInList = (byte)1,
                            VisibleNameRU = "World of Warcraft"
                        },
                        new
                        {
                            Id = 9,
                            Enabled = true,
                            HashTag = "#noobclub #wowclassic",
                            InternalName = "wow_classic",
                            NewsSource = "noobclub",
                            OrderInList = (byte)2,
                            VisibleNameRU = "World of Warcraft Classic"
                        },
                        new
                        {
                            Id = 10,
                            Enabled = true,
                            HashTag = "#noobclub #diablo",
                            InternalName = "diablo",
                            NewsSource = "noobclub",
                            OrderInList = (byte)3,
                            VisibleNameRU = "Diablo"
                        },
                        new
                        {
                            Id = 11,
                            Enabled = true,
                            HashTag = "#noobclub #hearthstone",
                            InternalName = "hearthstone",
                            NewsSource = "noobclub",
                            OrderInList = (byte)4,
                            VisibleNameRU = "Hearthstone"
                        },
                        new
                        {
                            Id = 12,
                            Enabled = true,
                            HashTag = "#noobclub #overwatch",
                            InternalName = "overwatch",
                            NewsSource = "noobclub",
                            OrderInList = (byte)5,
                            VisibleNameRU = "Overwatch"
                        },
                        new
                        {
                            Id = 13,
                            Enabled = true,
                            HashTag = "#noobclub #warcraft",
                            InternalName = "warcraft 3",
                            NewsSource = "noobclub",
                            OrderInList = (byte)6,
                            VisibleNameRU = "Warcraft"
                        },
                        new
                        {
                            Id = 14,
                            Enabled = true,
                            HashTag = "#noobclub #blizzard",
                            InternalName = "blizzard",
                            NewsSource = "noobclub",
                            OrderInList = (byte)7,
                            VisibleNameRU = "Blizzard"
                        });
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.NotificationTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DoneAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashTag")
                        .HasColumnType("TEXT");

                    b.Property<int>("InternalUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InternalUserId");

                    b.ToTable("NotificationTasks");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("TEXT");

                    b.Property<int>("InternalUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("TopicInternalName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InternalUserId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("UIType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.UserAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<int>("InternalUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InternalUserId");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.NotificationTask", b =>
                {
                    b.HasOne("NewsMix.Storage.Entities.User", "User")
                        .WithMany("NotificationTasks")
                        .HasForeignKey("InternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.Subscription", b =>
                {
                    b.HasOne("NewsMix.Storage.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("InternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.UserAction", b =>
                {
                    b.HasOne("NewsMix.Storage.Entities.User", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("InternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsMix.Storage.Entities.User", b =>
                {
                    b.Navigation("NotificationTasks");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserActions");
                });
#pragma warning restore 612, 618
        }
    }
}
